---
- import_playbook: vpc.yml
- hosts: localhost
  connection: local
  gather_facts: no

  tasks:
    - name: Create RDS subnet group
      rds_subnet_group:
        region: "{{ region }}"
        state: present
        name: "{{ project_slug }}-rds-subnet-group"
        description: "Database subnet for {{ project_slug }} instance of {{ project }}"
        subnets:
          - "{{ subnet_private.subnet.id }}"
          - "{{ subnet_private2.subnet.id }}"
      register: "rds_subnet_group"

    - name: Create database security group
      ec2_group:
        name: "{{ project_slug }}-rds-security-group"
        description: an example EC2 group
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        state: present
        rules:
          - proto: tcp
            from_port: 5432
            to_port: 5432
            cidr_ip: 0.0.0.0/0
      register: "rds_sg"

    - name: Create RDS postgres instance
      command: "aws rds create-db-instance
        --db-instance-identifier {{ project_slug }}-database
        --storage-type gp2
        --allocated-storage {{ pg_fs_size }}
        --db-instance-class {{ pg_instance_type }}
        --engine postgres
        --master-username {{ pg_username }}
        --master-user-password {{ pg_password }}
        --vpc-security-group-ids {{ rds_sg.group_id }}
        --region {{ region }}
        --availability-zone {{ az }}
        --db-subnet-group-name {{ project_slug }}-rds-subnet-group
        --auto-minor-version-upgrade
        --no-multi-az
        --no-publicly-accessible
        --storage-encrypted"
      environment:
        AWS_ACCESS_KEY_ID: "{{ lookup('env','AWS_ACCESS_KEY_ID') }}"
        AWS_SECRET_ACCESS_KEY: "{{ lookup('env','AWS_SECRET_ACCESS_KEY') }}"
        PYTHONPATH: "python3.5"
      register: result
      failed_when: >
        result.rc != 0 and ('DBInstanceAlreadyExists' not in result.stderr)
      changed_when: "result.rc == 0"


# These tasks work but the database isn't accessible
# if we setup a bastion  Ansible can ssh in
# and acccess it from there.
#
#    - name: Create Datbase
#      postgresql_db:
#        login_host: "{{ database.instance.endpoint }}"
#        login_user: "{{ pg_username }}"
#        login_password: "{{ pg_password }}"
#        name: intake
#
#    - name: Create Application User with DB access
#      postgresql_user:
#        login_host: "{{ database.instance.endpoint }}"
#        login_user: "{{ pg_username }}"
#        login_password: "{{ pg_password }}"
#        db: intake
#        name: "{{ pg_app_username }}"
#        password: "{{ pg_app_password }}"
#        priv: "CONNECT"
#        role_attr_flags: NOSUPERUSER
#        no_password_changes: true
#
#    - name: Give Application User CREATE on database so they can make schemas
#      postgresql_privs:
#        login_host: "{{ database.instance.endpoint }}"
#        login_user: "{{ pg_username }}"
#        login_password: "{{ pg_password }}"
#        db: intake
#        privs: CREATE
#        type: database
#        obj: intake
#        role: intake
#
# Until its working we can do this manually from a beanstalk instance

