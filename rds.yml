---
- import_playbook: vpc.yml
- hosts: localhost
  connection: local
  gather_facts: no

  tasks:
    - name: Create RDS subnet group
      rds_subnet_group:
        region: "{{ region }}"
        state: present
        name: "{{ project_slug }}-rds-subnet-group"
        description: "Database subnet for {{ project_slug }} instance of {{ project }}"
        subnets:
          - "{{ subnet_private.subnet.id }}"
          - "{{ subnet_private2.subnet.id }}"
      register: "rds_subnet_group"

    - name: Create Bastion security group
      ec2_group:
        name: "{{ project_slug }}-ec2-security-group"
        description: an example EC2 group
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        state: present
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
      register: "ec2_sg"

    - name: Elastic Beanstalk security group
      ec2_group:
        name: "{{ project_slug }}-eb-security-group"
        description: an example EC2 group
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        state: present
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{ ec2_sg.group_id }}"
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
          - proto: udp
            from_port: 123
            to_port: 123
            cidr_ip: 0.0.0.0/0
      register: "eb_sg"

    - name: Create database security group
      ec2_group:
        name: "{{ project_slug }}-rds-security-group"
        description: an example EC2 group
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        state: present
        rules:
          - proto: tcp
            from_port: 5432
            to_port: 5432
            group_id: "{{ ec2_sg.group_id }}"
          - proto: tcp
            from_port: 5432
            to_port: 5432
            group_id: "{{ eb_sg.group_id }}"
      register: "rds_sg"

    - name: Create RDS postgres instance
      command: "aws rds create-db-instance
        --db-instance-identifier {{ project_slug }}-database
        --storage-type gp2
        --allocated-storage {{ pg_fs_size }}
        --db-instance-class {{ pg_instance_type }}
        --engine postgres
        --master-username {{ pg_username }}
        --master-user-password {{ pg_password }}
        --vpc-security-group-ids {{ rds_sg.group_id }}
        --region {{ region }}
        --availability-zone {{ az }}
        --db-subnet-group-name {{ project_slug }}-rds-subnet-group
        --auto-minor-version-upgrade
        --no-multi-az
        --no-publicly-accessible
        --storage-encrypted"
      environment:
        AWS_ACCESS_KEY_ID: "{{ lookup('env','AWS_ACCESS_KEY_ID') }}"
        AWS_SECRET_ACCESS_KEY: "{{ lookup('env','AWS_SECRET_ACCESS_KEY') }}"
        PYTHONPATH: "python3.5"
      register: result
      failed_when: >
        result.rc != 0 and ('DBInstanceAlreadyExists' not in result.stderr)
      changed_when: "result.rc == 0"

    - name: Create Bastion
      ec2:
        region: "{{ region }}"
        key_name: cmr-ansible-key
        instance_type: t2.micro
        image: ami-97785bed # amazon linux hvm/64bit consider: openvpn ami-97785bed
        wait: no
        group: "{{ project_slug }}-ec2-security-group"
        vpc_subnet_id: "{{ subnet_public.subnet.id }}"
        assign_public_ip: yes
        exact_count: 1
        count_tag:
          Name: "{{ project_slug }}-bastion"
        instance_tags:
          Name: "{{ project_slug }}-bastion"
      register: bastion_ec2

    - name: Create Test Server
      ec2:
        region: "{{ region }}"
        key_name: cmr-ansible-key
        instance_type: t2.micro
        image: ami-97785bed # amazon linux hvm/64bit consider: openvpn ami-97785bed
        wait: no
        group: "{{ project_slug }}-eb-security-group"
        vpc_subnet_id: "{{ subnet_private.subnet.id }}"
        assign_public_ip: yes
        exact_count: 1
        count_tag:
          Name: "{{ project_slug }}-test-ec2"
        instance_tags:
          Name: "{{ project_slug }}-test-ec2"
      register: test_ec2

    - name: Wait for DB to be up
      rds:
        command: facts
        instance_name: "{{ project_slug }}-database"
        region: "{{ region }}"
      register: database
      until: not(database.instance.endpoint is none)
      retries: 180
      delay: 10

    - name: Wait for Bastian to be up
      ec2_instance_facts:
        instance_ids:
          - "{{ item.id }}"
        region: "{{ region }}"
      register: bastion
      until: not(bastion.tagged_instances.0.public_dns_name is none)
      retries: 180
      delay: 10
      with_items: "{{ bastion_ec2.tagged_instances }}"

    - name: Wait for Test EC2 to be up
      ec2_instance_facts:
        instance_ids:
          - "{{ item.id }}"
        region: "{{ region }}"
      register: test
      until: not(test.tagged_instances.0.public_dns_name is none)
      retries: 180
      delay: 10
      with_items: "{{ test_ec2.tagged_instances }}"

    - name: Test info
      debug:
        var=test

    - name: Bastion info
      debug:
        var=bastion

    - name: RDS info
      debug:
        var=database

